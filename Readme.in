# ipytest - Unit tests in IPython notebooks

[Usage](#usage)
| [Global state](#global-state)
| [Changes](#changes)
| [Related packages](#related-packages)
| [Reference](#reference)
| [Development](#development)
| [License](#license)


Sometimes quick experiments in IPython grow large and you find yourself wanting
unit tests. This module aims to make testing code in IPython notebooks easy. At
its core, it offers a way to run [`pytest`](https://pytest.org) tests inside the
notebook environment. It is also designed to make the transfer of the tests into
proper python modules easy.

Installation: `pip install ipytest`

Features:

- support for [pytest](pytest.org) inside notebooks (with all bells and
  whistles)
- tight integration with IPython via magics and automatic code transforms

## Usage

For usage see the [example notebook](./Example.ipynb) or the documentation for
the core API below. The suggested way to import `ipytest` is:

```python
import ipytest
ipytest.autoconfig()
```

Afterwards in a *new* cell, tests can be executed as in:

```python
%%run_pytest[clean] -qq

def test_example():
    assert [1, 2, 3] == [1, 2, 3]
```

This command will first delete any previously defined tests, execute the cell
and then run pytest. See the [reference](#reference) for a detailed list of
available functionality.

## Global state

There are multiple sources of global state when using pytest inside the notebook:

1. pytest will find any test function ever defined. This behavior can lead to
   unexpected results when test functions are renamed, as their previous
   definition is still available inside the kernel. `ipytest` ships the
   [`clean_test`](#ipytestclean_tests) function to delete such instances.
   Also the [`%%run_pytest[clean]`](#run_pytestclean-) magic clears any
   previously defined tests.
2. Python's module system caches imports and therefore acts as a global state.
   To test the most recent version of any module, the module needs to be
   reloaded. `ipytest` offers the [`reload`](#ipytestreload) function. The
   `autoreload` extension of IPython may also help here. To test local
   packages, it is advisable to install them as development packages, e.g.,
   `pip install -e .`.
3. For async code, IPython will create an event loop in the current thread.
   This setup may interfere with async tests. To support these use cases,
   ipytest supports running tests in a separate thread. Simply setup ipytest
   via `ipytest.autoconfig(run_in_thread=True)`.

## Changes

Note: development is tracked on the `develop` branch.

- `development`:
    - Expose the `ModuleCollectorPlugin` that powers `ipytest` to enable more
      customized applications
    - Remove `return_exit_code` argument from `ipytest.run`
    - Simplify config implementation: restrict config changes to function calls
    - Allow to use the generated module name in the arguments passed to pytest
      by using `{MODULE}`
    - Allow to fully customize the command line and to skip passing the
      current module as an argument
    - Remove `tempfile_fallback` and `register_module` config options
    - Remove `filename` argument for run
    - Remove `running_as_test` function
    - Require `python>=3.6`
    - Remove `%%rewrite_asserts` magic
- `0.9.1`:
    - Add `ipython` as an explicit dependency
- `0.9.0`:
    - Add `Pytest>=5.4` to the requirements
    - Remove legacy functionality, mostly plain unittest integration
    - The `tempfile_fallback` also kicks in, if a filename was configured, but
      the file does not exist
    - Add `register_module` option to register the notebook with the module
      system of Python. This way `--doctest-modules` works as expected
- `0.8.1`: release with sdist for conda-forge
- `0.8.0`:
    - Add the `autoconfig` helper to simplfy setup with reasonable defaults
    - Stop using deprecated pytest API
- `0.7.1`:
    - fix assertion rewriting for `pytest>=5.0.0`
- `0.7.0`:
    - add option to run tests in separate threads. This change allows to test
      async code with the `pytest_asyncio` plugin
    - add a proper signature to `ipytest.config(...)` and show the current
      settings as a repr.
- `0.6.0`: officially remove python 2 support. While `ipytest` was marked to
  work on python 2 and python 3, this statement was not tested and most likely
  not true. This change only documents the current state.
- `0.5.0`:
    - Fix assertion rewriting via magics in `ipython>=7`
    - Add support to raise a `RuntimeError` on test errors (set
      `ipytest.config.raise_on_error = True`)
    - Add support to set base arguments (set `ipytest.config.addopts = []`)
    - Add config setting to enable magics (set `ipytest.config.magics = True`).
    - Add config setting to create a temporary file to work without the
      notebook filename (set `ipytest.config.tempfile_fallback = True`).
    - Allow to set multiple config values at the same time by calling the
      config object (`ipytest.config(...)`).
    - Add `ipytest.running_as_test()` to detect whether a notebook is executed
      as a test.
- `0.4.0`: add support for automatic AST transforms, deprecate non pytest API.
- `0.3.0`: change default pattern for `clean_tests` to match pytest discovery
- `0.2.2`: add support for assert rewriting with current pytest versions
- `0.2.1`: add ipython magics to simplify test execution
- `0.2.0`: support for using pytest inside notebooks
- `0.1.0`: support for running `unittest.FunctionTestCase`,
  `unittest.TestCases`, and `doctests`.

## Related packages

`ipytest` is designed to enable running tests within an interactive notebook
session. There are also other packages that aim to use notebooks as tests
themselves, for example by comparing the output of running all cells to the
output of previous runs. These packages include:

- [nbval](https://github.com/computationalmodelling/nbval) is actively
  maintained. It is also used in the integration tests of `ipytest`.
- [pytest-ipynb](https://github.com/zonca/pytest-ipynb) seems to be no longer
  maintained as the latest commit was on March 2016. .
- ...

Please create an issue, if I missed a packaged or mischaracterized any package.

## Reference

.. autofunction:: ipytest.autoconfig

### `%%run_pytest ...`

IPython magic that first executes the cell, then executes `ipytest.run()`.
Any arguments passed on the magic line be passed on to pytest.
To register the magics, run `ipytest.config.magics = True` first.

For example:

```python
%%run_pytest -qq


def test_example():
    ...

```

### `%%run_pytest[clean] ...`

Same as the `%%run_pytest`, but cleans any previously found tests, i.e., only
tests defined in the current cell are executed.
To register the magics, run `ipytest.config.magics = True` first.

.. autofunction:: ipytest.config

### `ipytest.exit_code`

The return code of the last pytest invocation.

.. autofunction:: ipytest.run

.. autofunction:: ipytest.clean_tests

.. autofunction:: ipytest.reload

.. autoclass:: ipytest.ModuleCollectorPlugin

## Development

Setup the virtual environment via:

```bash
pip install -r requirements-dev.txt
```

To execute the unit tests of `ipytest` run

```bash
python make.py test
python make.py integration
```

Before commit execute `python make.py precommit` to update the documentation,
format the code, and run tests.

To create a new release execute:

```bash
python make.py release
```

## License

.. literalinclude:: License.md
