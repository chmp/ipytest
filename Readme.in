# ipytest - Pytest in Jupyter notebooks

[Usage](#usage)
[Usage](#extended-usage)
| [Global state](#global-state)
| [How does it work?](#how-does-it-work)
| [Changes](Changes.md)
| [Reference](#reference)
| [Development](#development)
| [Related packages](#related-packages)
| [License](#license)

`ipytest` allows you to run [Pytest](https://pytest.org) in Jupyter notebooks.
`ipytest` aims to give access to the full `pytest` experience to make it easy to
transfer tests out of notebooks into separate test files.

Installation: `pip install ipytest`

## Usage

For usage see the [example notebook](./Example.ipynb) or the documentation for
the core API below. The suggested way to import `ipytest` is:

```python
import ipytest
ipytest.autoconfig()
```

Afterwards in a *new* cell, tests can be executed as in:

```python
%%ipytest -qq

def test_example():
    assert [1, 2, 3] == [1, 2, 3]
```

This command will first delete any previously defined tests, execute the cell
and then run pytest. For further details on how to use `ipytest` see [Extended
usage](#extend-usage).

**NOTE:** Some notebook implementations modify the core IPython package and
magics may not work correctly (see [here][issue-47] or [here][issue-50]). In
this case, using `ipytest.run` and `ipytest.clean_tests` directly should still
work as expected.

[issue-47]: https://github.com/chmp/ipytest/issues/47
[issue-50]: https://github.com/chmp/ipytest/issues/50

## Global state

There are multiple sources of global state when using pytest inside the notebook:

1. pytest will find any test function ever defined. This behavior can lead to
   unexpected results when test functions are renamed, as their previous
   definition is still available inside the kernel. Running
   [`%%ipytest`](#ipyest) per default deletes any previously defined tests. As
   an alternative the [`clean_test`](#ipytestclean_tests) function allows to
   delete previously defined tests.
2. Python's module system caches imports and therefore acts as a global state.
   To test the most recent version of any module, the module needs to be
   reloaded. `ipytest` offers the [`reload`](#ipytestreload) function. The
   `autoreload` extension of IPython may also help here. To test local
   packages, it is advisable to install them as development packages, e.g.,
   `pip install -e .`.
3. For async code, IPython will create an event loop in the current thread.
   This setup may interfere with async tests. To support these use cases,
   ipytest supports running tests in a separate thread. Simply setup ipytest
   via `ipytest.autoconfig(run_in_thread=True)`.

## Extend usage

It is also possible to use `ipytest` without magics by calling the `run`
function as in:

```python
ipytest.run()
```

This function is a thin wrapper around `pytest.main` and will execute any tests
defined in the current notebook session.  See the [reference](#reference) for a
detailed list of available functionality.

**NOTE:** In its default configuration `%%ipytest` and `ipytest.run` will not
raise an error, when tests fail. The reason is that having multiple tracebacks
(the one from pytest and ipytest) may be confusing. To raise exceptions on test
errors, e.g., to use ipytest inside a CI/CD context, use:

```python
ipytest.autoconfig(raise_on_error=True)
```

`ipytest` can pass additional arguments to pytest. Per default, only the
filename that is associated with the notebook is passed. There are a number of
ways to configure this behavior:

- `ipytest.config(addopts=...)` or `ipytest.autconfig(addopts=...)` allow to
  specify a list of strings that are added to the command line. For example,
  `ipytest.autoconfig(addopts=["-x", "--pdb"])` will attach the debugger on the
  first test failure and not run further tests.
- `ipytest.run(...)`: allows to specify additional arguments as strings
- `%%ipytest` allows to specify additional arguments in the same line
- `ipytest.config(defopts=False)` or `ipytest.autoconfig(defopts=False)` will
  instruct `ipytest` to not pass the current module filename. It can still be
  passed manually by adding `{MODULE}` to the command line.

The arguments are formatted using Python's standard string formatting.
Currently, only the `{MODULE}` variable is understood. It is replaced with the
filename associated with the notebook.

## How does it work?

In its default configuration (via `autoconfig()`), `ipytest` performs the
following steps:

1. Register pytest's assertion rewriter with the IPython kernel. The rewriter
   will rewrite any assert statements entered into the notebook to give better
   error messages. This change will affect also non test based code, but should
   generally improve the development experience.
2. Ensure the notebook can be mapped to a file. `ipytest` will create a
   temporary file in the current directory and remove if afterwards.
3. Register the notebook scope temporarily as a module. This step is necessary
   to allow pytest's doctest plugin to import the notebook.
4. Call pytest with the name of the temporary module

## Reference

.. autofunction:: ipytest.autoconfig

### `%%ipytest ...`

IPython magic that first executes the cell, then executes `ipytest.run()`. Any
arguments passed on the magic line be passed on to pytest. It cleans any
previously found tests, i.e., only tests defined in the current cell are
executed. To disable this behavior, use `ipytest.config(clean=False)`. To
register the magics, run `ipytest.autoconfig()` or `ipytest.config(magics=True)`
first.

Additional arguments can be passed to pytest. See the section "How does it work"
for specifics.

For example:

```python
%%ipytest -qq


def test_example():
    ...

```

.. autofunction:: ipytest.config

### `ipytest.exit_code`

The return code of the last pytest invocation.

.. autofunction:: ipytest.run

.. autofunction:: ipytest.clean_tests

.. autofunction:: ipytest.reload

.. autoclass:: ipytest.Error

## Development

Setup the virtual environment via:

```bash
pip install -r requirements-dev.txt
```

To execute the unit tests of `ipytest` run

```bash
python make.py test
python make.py integration
```

Before commit execute `python make.py precommit` to update the documentation,
format the code, and run tests.

To create a new release execute:

```bash
python make.py release
```


## Related packages

`ipytest` is designed to enable running tests within an interactive notebook
session. There are also other packages that aim to use notebooks as tests
themselves, for example by comparing the output of running all cells to the
output of previous runs. These packages include:

- [nbval](https://github.com/computationalmodelling/nbval) is actively
  maintained. It is also used in the integration tests of `ipytest`.
- [pytest-ipynb](https://github.com/zonca/pytest-ipynb) seems to be no longer
  maintained as the latest commit was on March 2016. .
- ...

Please create an issue, if I missed a packaged or mischaracterized any package.


## License

.. literalinclude:: License.md
