from __future__ import print_function, division, absolute_import

import ast
import contextlib
import pathlib
import shlex
import sys
import tempfile

import packaging.version
import pytest

from IPython import get_ipython

from ._config import current_config
from . import _util


def run(*args, module=None, plugins=()):
    """Execute all tests in the passed module (defaults to __main__) with pytest.

    :param args:
        additional commandline options passed to pytest
    :param module:
        the module containing the tests. If not given, `__main__` will be used.
    :param filename:
        the filename of the file containing the tests. It has to be a real
        file, e.g., a notebook name, since itts existence will be checked by
        pytest. If not given, the `__file__` attribute of the passed module
        will be used.
    :param plugins:
        additional plugins passed to pytest.
    """
    import ipytest

    run = _util.run_in_thread if current_config["run_in_thread"] else _util.run_direct
    ipytest.exit_code = run(
        _run_impl,
        *args,
        module=module,
        plugins=plugins,
    )


def _run_impl(*args, module, plugins):
    with _prepared_module(module) as filename:
        full_args = _build_full_args(args, filename)
        return pytest.main(full_args, plugins=plugins)


def _build_full_args(args, filename):
    def _fmt(arg):
        return arg.format(MODULE=filename)

    return [
        *(_fmt(arg) for arg in current_config["addopts"]),
        *(_fmt(arg) for arg in args),
        *([filename] if current_config["defopts"] else []),
    ]


@contextlib.contextmanager
def _prepared_module(module):
    if module is None:  # pragma: no cover
        import __main__ as module

    with tempfile.NamedTemporaryFile(dir=".", suffix=".py") as f:
        path = pathlib.Path(f.name)
        module_name = path.stem

        if not _util.is_valid_module_name(module_name):
            raise RuntimeError(
                f"Invalid module name {module_name!r} generated by tempfile. "
                "This should not happen, please open an issue at "
                "'https://github.com/chmp/ipytest/issues' to report a bug."
            )

        if module_name in sys.modules:
            raise RuntimeError(
                f"Cannot register module with name {module_name!r}. It would "
                "override and existing module. Consider not setting __file__ "
                "inside the notebook. This way a random module name will be generated."
            )

        with _util.patch(module, "__file__", str(path)):
            with _util.register_module(module, module_name):
                yield str(path)


class RewriteAssertTransformer(ast.NodeTransformer):
    def register_with_shell(self, shell):
        shell.ast_transformers.append(self)

    def unregister_with_shell(self, shell):
        shell.ast_transformers[:] = [
            transformer
            for transformer in shell.ast_transformers
            if transformer is not self
        ]

    def visit(self, node):
        from _pytest.assertion.rewrite import rewrite_asserts

        pytest_version = get_pytest_version()
        if pytest_version.release[0] >= 5:
            # TODO: re-create a pseudo code to include the asserts?
            rewrite_asserts(node, b"")

        else:
            rewrite_asserts(node)
        return node


def get_pytest_version():
    return packaging.version.parse(pytest.__version__)


def run_pytest_clean(line, cell):
    _util.clean_tests()
    get_ipython().run_cell(cell)
    run(*shlex.split(line))


def run_pytest(line, cell):
    get_ipython().run_cell(cell)
    run(*shlex.split(line))
